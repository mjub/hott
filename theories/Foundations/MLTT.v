(** This file is part of [https://github.com/mjub/hott]. *)

(** * Martin-L√∂f type theory

  Let us write the universes [ùëà] instead of [Type] because, why not? *)

Notation ùëà‚ÇÄ := Set.
Notation ùëà := Type.

(** ** Dependent function types *)

Notation "‚àè x .. y , B" := (forall x, .. (forall y, B) ..)
  (at level 10, x binder, y binder, B at level 200,
  format "'[  ' '[  ' ‚àè  x  ..  y ']' ,  '/' B ']'").

Notation "A ‚Üí B" := (‚àè _ : A, B)
  (at level 99, B at level 200, right associativity).

Notation "'Œª' x .. y , T" := (fun x => .. (fun y => T) ..)
  (at level 10, x binder, y binder, T at level 200,
  format "'[  ' '[  ' 'Œª'  x  ..  y ']' ,  '/' T ']'").

(** ** Dependent pair types *)

Inductive Sigma (A : ùëà) (B : A ‚Üí ùëà) : ùëà :=
  pair : ‚àè x, B x ‚Üí _.

Arguments pair {_ _}.

Notation "‚àë x .. y , B" := (Sigma _ (Œª x, .. (Sigma _ (Œª y, B)) ..))
  (at level 10, x binder, y binder, B at level 200,
  format "'[  ' '[  ' ‚àë  x  ..  y ']' ,  '/' B ']'").

Notation "A √ó B" := (‚àë _ : A, B)
  (at level 40, right associativity).

Notation "( x , .. , y , z )" := (pair x (.. (pair y z) ..))
  (at level 0, format "( '[' x ,  '/' .. ,  '/' y ,  '/' z ']' )").

Section Sigma.
  Context {A : ùëà} {B : A ‚Üí ùëà}.

  Definition sigma_elim (C : (‚àë x, B x) ‚Üí ùëà) (g : ‚àè x (y : B x), C (x, y)) p : C p :=
    match p with pair x y => g x y end.

  Definition pr‚ÇÅ : (‚àë x, B x) ‚Üí A := sigma_elim _ (Œª x _, x).
  Definition pr‚ÇÇ : ‚àè p : ‚àë x, B x, B (pr‚ÇÅ p) := sigma_elim _ (Œª _ y, y).
End Sigma.

Notation "p .1" := (pr‚ÇÅ p)
  (at level 1, left associativity, format "p .1").
Notation "p .2" := (pr‚ÇÇ p)
  (at level 1, left associativity, format "p .2").
